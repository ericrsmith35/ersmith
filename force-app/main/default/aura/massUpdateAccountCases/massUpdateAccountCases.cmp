<!--
 * Copyright (c) 2018, Salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root
 -->

<!-- 
To be used as a quick action, a Lightning component needs to meet certain conditions. It needs to be configured as able to be executed as an action. It also needs to know the context of the page that it’s executed from. And, since you’re modifying data and want to save the changes, you need an Apex class to help with the work.

For the component to know its page context, it must implement the "force:hasRecordId" interface. 
This interface helps save the record ID, so you can make changes to the record.

For the component to be used as a quick action, it must also implement the  "force:lightningQuickActionWithoutHeader" interface.

-->
<aura:component implements="force:lightningQuickActionWithoutHeader,force:hasRecordId"
                controller="MassUpdateAccountCasesController">
    			<!-- Replace MassUpdateAccountCasesController with your Apex class -->
    
    <!-- This attribute saves the record ID -->
    <aura:attribute name="recordId" type="String" />
    
    <!-- This executes a function from the controller as soon as the component is open. 
	This is recommended when the action only processes data and there’s no need for user interaction -->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <!-- 
       The "c" in "{!c.nameOfTheFunction}" is how the component communicates with the 
       Javascript controller.
       "nameOfTheFunction" will be replaced with the name of the function to be executed in the
       Javascript controller.
	-->
    
    <!-- The process is all handled by the server, so you don't need to set modal design or size. The modal will close as soon as the component is executed. -->
	
</aura:component>